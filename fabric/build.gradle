plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    // Fuzs Config API. This mod is needed for the config system.
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:$fuzs_config_api_version"

    // ModMenu. This is optional, and you can comment it out if you don't need it.
    modRuntimeOnly "com.terraformersmc:modmenu:7.2.2"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {

    var replaceProperties = [
            minecraft_version: minecraft_version, forge_version: forge_version, mod_id: archives_name,
            mod_name: mod_name, mod_logo: mod_logo, mod_license: mod_license, mod_version: mod_version,
            mod_author: mod_author, mod_authors: "${mod_author}, ${mod_contributors}", mod_contributors: mod_contributors,
            mod_description: mod_description, version: project.version, group: project.group,
            modrinth: modrinth, discord: discord, website: website, github: github, issue_tracker: issue_tracker,
            depend_architectury: architectury_api_version, depend_fabric: fabric_loader_version, depend_fuzs_config: fuzs_config_api_version
    ]
    inputs.properties replaceProperties

    filesMatching('fabric.mod.json') {
        expand replaceProperties + [project: project]
    }

}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
