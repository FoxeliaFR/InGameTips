plugins {
    id 'com.github.johnrengelman.shadow'
}

repositories {
    maven { url 'https://maven.quiltmc.org/repository/release/' }
}

architectury {
    platformSetupLoomIde()
    loader('quilt')
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:$rootProject.quilt_loader_version"

    modApi("com.terraformersmc:modmenu:$modmenu_version") {
        exclude group: 'net.fabricmc.fabric-api'
        exclude group: 'net.fabricmc'
    }

    modApi("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_api_version") {
        exclude group: 'net.fabricmc.fabric-api'
        exclude group: 'net.fabricmc'
    }

    // Quilt Standard Libraries and QSL.
    modImplementation "org.quiltmc.quilted-fabric-api:quilted-fabric-api:$rootProject.quilted_fabric_api_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation("dev.architectury:architectury-fabric:$rootProject.architectury_api_version") {
        // We must not pull Fabric Loader and Fabric API from Architectury Fabric.
        exclude group: 'net.fabricmc'
        exclude group: 'net.fabricmc.fabric-api'
    }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionQuilt')
}

processResources {

    var replaceProperties = [
            minecraft_version: minecraft_version, forge_version: forge_version, mod_id: archives_name,
            mod_name: mod_name, mod_logo: mod_logo, mod_license: mod_license, mod_version: mod_version,
            mod_author: mod_author, mod_authors: "${mod_author}, ${mod_contributors}", mod_contributors: mod_contributors,
            mod_description: mod_description, version: project.version, group: project.group,
            modrinth: modrinth, discord: discord, website: website, github: github, issue_tracker: issue_tracker,
            depend_architectury: architectury_api_version, depend_fabric: fabric_loader_version, depend_fuzs_config: fuzs_config_api_version
    ]
    inputs.properties replaceProperties

    filesMatching('quilt.mod.json') {
        expand replaceProperties + [project: project]
    }

}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
